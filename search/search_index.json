{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scraping_formations Purpose Dependencies: azure Setup","title":"Accueil"},{"location":"#scraping_formations","text":"","title":"Scraping_formations"},{"location":"#purpose","text":"","title":"Purpose"},{"location":"#dependencies","text":"azure","title":"Dependencies:"},{"location":"#setup","text":"","title":"Setup"},{"location":"api/crud/","text":"CRUD API create_formation ( db , formation ) Create a new formation in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. formation ( FormationCreate ) \u2013 The data for the formation to create. Returns: \u2013 models.Formation: The created Formation object. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def create_formation ( db : Session , formation : schemas . FormationCreate ): \"\"\" Create a new formation in the database. Args: db (Session): The SQLAlchemy database session. formation (schemas.FormationCreate): The data for the formation to create. Returns: models.Formation: The created Formation object. \"\"\" db_formation = models . Formation ( ** formation . dict ()) db . add ( db_formation ) db . commit () db . refresh ( db_formation ) return db_formation create_france_competences ( db , france_competences ) Create new France competencies in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. france_competences ( FranceCompetencesCreate ) \u2013 The data for the France competencies to create. Returns: \u2013 models.FranceCompetences: The created FranceCompetences object. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def create_france_competences ( db : Session , france_competences : schemas . FranceCompetencesCreate ): \"\"\" Create new France competencies in the database. Args: db (Session): The SQLAlchemy database session. france_competences (schemas.FranceCompetencesCreate): The data for the France competencies to create. Returns: models.FranceCompetences: The created FranceCompetences object. \"\"\" db_france_competences = models . FranceCompetences ( ** france_competences . dict ()) db . add ( db_france_competences ) db . commit () db . refresh ( db_france_competences ) return db_france_competences create_session ( db , session ) Create a new session in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. session ( SessionCreate ) \u2013 The data for the session to create. Returns: \u2013 models.Session: The created Session object. Source code in api/crud.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def create_session ( db : Session , session : schemas . SessionCreate ): \"\"\" Create a new session in the database. Args: db (Session): The SQLAlchemy database session. session (schemas.SessionCreate): The data for the session to create. Returns: models.Session: The created Session object. \"\"\" db_session = models . Session ( ** session . dict ()) db . add ( db_session ) db . commit () db . refresh ( db_session ) return db_session get_format_code_by_code_certif ( db , code_certif ) Retrieve format codes associated with a specific certification code. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. code_certif ( str ) \u2013 The certification code to filter format codes. Returns: \u2013 List[str] | None: A list of format codes, or None if an error occurs. Source code in api/crud.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def get_format_code_by_code_certif ( db : Session , code_certif : str ): \"\"\" Retrieve format codes associated with a specific certification code. Args: db (Session): The SQLAlchemy database session. code_certif (str): The certification code to filter format codes. Returns: List[str] | None: A list of format codes, or None if an error occurs. \"\"\" try : result = db . execute ( text ( \"\"\" SELECT lffc.formacode FROM lien_france_competences_formacode lffc JOIN france_competences fc ON lffc.code_certif = fc.code_certif WHERE lffc.code_certif = :code_certif \"\"\" ), { 'code_certif' : code_certif }) . all () # Convertir les r\u00e9sultats en dictionnaires et acc\u00e9der \u00e0 formacode if result : result_dict = [ r [ 0 ] for r in result ] return result_dict else : return None except Exception as e : print ( f \"An error occurred: { e } \" ) return None get_formation_by_code_certif ( db , code_certif ) Retrieve formations associated with a specific certification code. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. code_certif ( str ) \u2013 The certification code to filter formations. Returns: \u2013 List[dict] | None: A list of dictionaries representing the formations, or None if an error occurs. Source code in api/crud.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def get_formation_by_code_certif ( db : Session , code_certif : str ): \"\"\" Retrieve formations associated with a specific certification code. Args: db (Session): The SQLAlchemy database session. code_certif (str): The certification code to filter formations. Returns: List[dict] | None: A list of dictionaries representing the formations, or None if an error occurs. \"\"\" try : result = db . execute ( text ( \"\"\" SELECT f.id_formation, f.titre, f.a_des_sessions, fc.est_actif, fc.nom_titre, s.nom, s.lieu, s.region, s.date_debut, f.a_des_rs_rncp FROM formation f JOIN lien_formation_france_competences lffc ON f.id_formation = lffc.id_formation JOIN france_competences fc ON lffc.code_certif = fc.code_certif LEFT JOIN session s ON f.id_formation = s.id_formation WHERE lffc.code_certif = :code_certif \"\"\" ), { 'code_certif' : code_certif }) # Convertir les r\u00e9sultats en dictionnaires formations = [ dict ( row ) for row in result . mappings () . all ()] return formations except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"crud"},{"location":"api/crud/#crud-api","text":"","title":"CRUD API"},{"location":"api/crud/#api.crud.create_formation","text":"Create a new formation in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. formation ( FormationCreate ) \u2013 The data for the formation to create. Returns: \u2013 models.Formation: The created Formation object. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def create_formation ( db : Session , formation : schemas . FormationCreate ): \"\"\" Create a new formation in the database. Args: db (Session): The SQLAlchemy database session. formation (schemas.FormationCreate): The data for the formation to create. Returns: models.Formation: The created Formation object. \"\"\" db_formation = models . Formation ( ** formation . dict ()) db . add ( db_formation ) db . commit () db . refresh ( db_formation ) return db_formation","title":"create_formation"},{"location":"api/crud/#api.crud.create_france_competences","text":"Create new France competencies in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. france_competences ( FranceCompetencesCreate ) \u2013 The data for the France competencies to create. Returns: \u2013 models.FranceCompetences: The created FranceCompetences object. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def create_france_competences ( db : Session , france_competences : schemas . FranceCompetencesCreate ): \"\"\" Create new France competencies in the database. Args: db (Session): The SQLAlchemy database session. france_competences (schemas.FranceCompetencesCreate): The data for the France competencies to create. Returns: models.FranceCompetences: The created FranceCompetences object. \"\"\" db_france_competences = models . FranceCompetences ( ** france_competences . dict ()) db . add ( db_france_competences ) db . commit () db . refresh ( db_france_competences ) return db_france_competences","title":"create_france_competences"},{"location":"api/crud/#api.crud.create_session","text":"Create a new session in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. session ( SessionCreate ) \u2013 The data for the session to create. Returns: \u2013 models.Session: The created Session object. Source code in api/crud.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def create_session ( db : Session , session : schemas . SessionCreate ): \"\"\" Create a new session in the database. Args: db (Session): The SQLAlchemy database session. session (schemas.SessionCreate): The data for the session to create. Returns: models.Session: The created Session object. \"\"\" db_session = models . Session ( ** session . dict ()) db . add ( db_session ) db . commit () db . refresh ( db_session ) return db_session","title":"create_session"},{"location":"api/crud/#api.crud.get_format_code_by_code_certif","text":"Retrieve format codes associated with a specific certification code. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. code_certif ( str ) \u2013 The certification code to filter format codes. Returns: \u2013 List[str] | None: A list of format codes, or None if an error occurs. Source code in api/crud.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def get_format_code_by_code_certif ( db : Session , code_certif : str ): \"\"\" Retrieve format codes associated with a specific certification code. Args: db (Session): The SQLAlchemy database session. code_certif (str): The certification code to filter format codes. Returns: List[str] | None: A list of format codes, or None if an error occurs. \"\"\" try : result = db . execute ( text ( \"\"\" SELECT lffc.formacode FROM lien_france_competences_formacode lffc JOIN france_competences fc ON lffc.code_certif = fc.code_certif WHERE lffc.code_certif = :code_certif \"\"\" ), { 'code_certif' : code_certif }) . all () # Convertir les r\u00e9sultats en dictionnaires et acc\u00e9der \u00e0 formacode if result : result_dict = [ r [ 0 ] for r in result ] return result_dict else : return None except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"get_format_code_by_code_certif"},{"location":"api/crud/#api.crud.get_formation_by_code_certif","text":"Retrieve formations associated with a specific certification code. Parameters: db ( Session ) \u2013 The SQLAlchemy database session. code_certif ( str ) \u2013 The certification code to filter formations. Returns: \u2013 List[dict] | None: A list of dictionaries representing the formations, or None if an error occurs. Source code in api/crud.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def get_formation_by_code_certif ( db : Session , code_certif : str ): \"\"\" Retrieve formations associated with a specific certification code. Args: db (Session): The SQLAlchemy database session. code_certif (str): The certification code to filter formations. Returns: List[dict] | None: A list of dictionaries representing the formations, or None if an error occurs. \"\"\" try : result = db . execute ( text ( \"\"\" SELECT f.id_formation, f.titre, f.a_des_sessions, fc.est_actif, fc.nom_titre, s.nom, s.lieu, s.region, s.date_debut, f.a_des_rs_rncp FROM formation f JOIN lien_formation_france_competences lffc ON f.id_formation = lffc.id_formation JOIN france_competences fc ON lffc.code_certif = fc.code_certif LEFT JOIN session s ON f.id_formation = s.id_formation WHERE lffc.code_certif = :code_certif \"\"\" ), { 'code_certif' : code_certif }) # Convertir les r\u00e9sultats en dictionnaires formations = [ dict ( row ) for row in result . mappings () . all ()] return formations except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"get_formation_by_code_certif"},{"location":"api/introduction/","text":"Documentation API Introduction Code Structure main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server. Endpoints","title":"Introduction"},{"location":"api/introduction/#documentation-api","text":"","title":"Documentation API"},{"location":"api/introduction/#introduction","text":"","title":"Introduction"},{"location":"api/introduction/#code-structure","text":"main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server.","title":"Code Structure"},{"location":"api/introduction/#endpoints","text":"","title":"Endpoints"}]}